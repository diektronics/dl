// Code generated by protoc-gen-go.
// source: dl.proto
// DO NOT EDIT!

/*
Package dlpb is a generated protocol buffer package.

It is generated from these files:
	dl.proto

It has these top-level messages:
	Down
	Link
	DownloadRequest
	DownloadResponse
	GetAllRequest
	GetAllResponse
	GetRequest
	GetResponse
	DelRequest
	DelResponse
	HookNamesRequest
	HookNamesResponse
*/
package dlpb

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Status int32

const (
	Status_QUEUED  Status = 0
	Status_RUNNING Status = 1
	Status_SUCCESS Status = 2
	Status_ERROR   Status = 3
)

var Status_name = map[int32]string{
	0: "QUEUED",
	1: "RUNNING",
	2: "SUCCESS",
	3: "ERROR",
}
var Status_value = map[string]int32{
	"QUEUED":  0,
	"RUNNING": 1,
	"SUCCESS": 2,
	"ERROR":   3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

type Down struct {
	Id          int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Status      Status   `protobuf:"varint,3,opt,name=status,enum=dlpb.Status" json:"status,omitempty"`
	Errors      []string `protobuf:"bytes,4,rep,name=errors" json:"errors,omitempty"`
	Posthook    []string `protobuf:"bytes,5,rep,name=posthook" json:"posthook,omitempty"`
	Destination string   `protobuf:"bytes,6,opt,name=destination" json:"destination,omitempty"`
	CreatedAt   int64    `protobuf:"varint,7,opt,name=created_at" json:"created_at,omitempty"`
	ModifiedAt  int64    `protobuf:"varint,8,opt,name=modified_at" json:"modified_at,omitempty"`
	Links       []*Link  `protobuf:"bytes,9,rep,name=links" json:"links,omitempty"`
	StatusText  string   `protobuf:"bytes,10,opt,name=status_text" json:"status_text,omitempty"`
}

func (m *Down) Reset()         { *m = Down{} }
func (m *Down) String() string { return proto.CompactTextString(m) }
func (*Down) ProtoMessage()    {}

func (m *Down) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

type Link struct {
	Id         int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url        string  `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Status     Status  `protobuf:"varint,3,opt,name=status,enum=dlpb.Status" json:"status,omitempty"`
	CreatedAt  int64   `protobuf:"varint,4,opt,name=created_at" json:"created_at,omitempty"`
	ModifiedAt int64   `protobuf:"varint,5,opt,name=modified_at" json:"modified_at,omitempty"`
	Filename   string  `protobuf:"bytes,6,opt,name=filename" json:"filename,omitempty"`
	Percent    float64 `protobuf:"fixed64,7,opt,name=percent" json:"percent,omitempty"`
	StatusText string  `protobuf:"bytes,8,opt,name=status_text" json:"status_text,omitempty"`
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}

type DownloadRequest struct {
	Down *Down `protobuf:"bytes,1,opt,name=down" json:"down,omitempty"`
}

func (m *DownloadRequest) Reset()         { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()    {}

func (m *DownloadRequest) GetDown() *Down {
	if m != nil {
		return m.Down
	}
	return nil
}

type DownloadResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DownloadResponse) Reset()         { *m = DownloadResponse{} }
func (m *DownloadResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadResponse) ProtoMessage()    {}

type GetAllRequest struct {
	Statuses []Status `protobuf:"varint,1,rep,name=statuses,enum=dlpb.Status" json:"statuses,omitempty"`
}

func (m *GetAllRequest) Reset()         { *m = GetAllRequest{} }
func (m *GetAllRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllRequest) ProtoMessage()    {}

type GetAllResponse struct {
	Downs []*Down `protobuf:"bytes,1,rep,name=downs" json:"downs,omitempty"`
}

func (m *GetAllResponse) Reset()         { *m = GetAllResponse{} }
func (m *GetAllResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllResponse) ProtoMessage()    {}

func (m *GetAllResponse) GetDowns() []*Down {
	if m != nil {
		return m.Downs
	}
	return nil
}

type GetRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}

type GetResponse struct {
	Down *Down `protobuf:"bytes,1,opt,name=down" json:"down,omitempty"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}

func (m *GetResponse) GetDown() *Down {
	if m != nil {
		return m.Down
	}
	return nil
}

type DelRequest struct {
	Down *Down `protobuf:"bytes,1,opt,name=down" json:"down,omitempty"`
}

func (m *DelRequest) Reset()         { *m = DelRequest{} }
func (m *DelRequest) String() string { return proto.CompactTextString(m) }
func (*DelRequest) ProtoMessage()    {}

func (m *DelRequest) GetDown() *Down {
	if m != nil {
		return m.Down
	}
	return nil
}

type DelResponse struct {
}

func (m *DelResponse) Reset()         { *m = DelResponse{} }
func (m *DelResponse) String() string { return proto.CompactTextString(m) }
func (*DelResponse) ProtoMessage()    {}

type HookNamesRequest struct {
}

func (m *HookNamesRequest) Reset()         { *m = HookNamesRequest{} }
func (m *HookNamesRequest) String() string { return proto.CompactTextString(m) }
func (*HookNamesRequest) ProtoMessage()    {}

type HookNamesResponse struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *HookNamesResponse) Reset()         { *m = HookNamesResponse{} }
func (m *HookNamesResponse) String() string { return proto.CompactTextString(m) }
func (*HookNamesResponse) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("dlpb.Status", Status_name, Status_value)
}

// Client API for Dl service

type DlClient interface {
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	HookNames(ctx context.Context, in *HookNamesRequest, opts ...grpc.CallOption) (*HookNamesResponse, error)
}

type dlClient struct {
	cc *grpc.ClientConn
}

func NewDlClient(cc *grpc.ClientConn) DlClient {
	return &dlClient{cc}
}

func (c *dlClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := grpc.Invoke(ctx, "/dlpb.Dl/Download", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dlClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := grpc.Invoke(ctx, "/dlpb.Dl/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dlClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/dlpb.Dl/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dlClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/dlpb.Dl/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dlClient) HookNames(ctx context.Context, in *HookNamesRequest, opts ...grpc.CallOption) (*HookNamesResponse, error) {
	out := new(HookNamesResponse)
	err := grpc.Invoke(ctx, "/dlpb.Dl/HookNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dl service

type DlServer interface {
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
	HookNames(context.Context, *HookNamesRequest) (*HookNamesResponse, error)
}

func RegisterDlServer(s *grpc.Server, srv DlServer) {
	s.RegisterService(&_Dl_serviceDesc, srv)
}

func _Dl_Download_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DownloadRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DlServer).Download(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Dl_GetAll_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetAllRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DlServer).GetAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Dl_Get_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DlServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Dl_Del_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DlServer).Del(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Dl_HookNames_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(HookNamesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DlServer).HookNames(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Dl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dlpb.Dl",
	HandlerType: (*DlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _Dl_Download_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Dl_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Dl_Get_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _Dl_Del_Handler,
		},
		{
			MethodName: "HookNames",
			Handler:    _Dl_HookNames_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
